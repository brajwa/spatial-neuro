dev.off()
A_env_linhom = envelope(A, fun = "Linhom", correction = "isotropic", nsim = 39)
B_env_linhom = envelope(B, fun = "Linhom", correction = "isotropic", nsim = 39)
my_color_map = c("CSR"="darkgrey", "Hom"="cyan3", "Inhom"="indianred")
g3 = ggplot()+
geom_ribbon(aes(x=A_env_linhom$r, ymin=A_env_linhom$lo-A_env_linhom$r, ymax=A_env_linhom$hi-A_env_linhom$r, fill="Hom"), alpha=0.2) +
geom_ribbon(aes(x=B_env_linhom$r, ymin=B_env_linhom$lo-B_env_linhom$r, ymax=B_env_linhom$hi-B_env_linhom$r, fill="Inhom"), alpha=0.2) +
geom_line(aes(x=A_env_linhom$r, y=A_env_linhom$obs-A_env_linhom$r, colour="Hom"), show.legend = F) +
geom_line(aes(x=B_env_linhom$r, y=B_env_linhom$obs-B_env_linhom$r, colour="Inhom"), show.legend = F) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=8),
legend.box.margin=margin(0,-10,-10,-10),
legend.key.size = unit(0.5, "cm"),
plot.title = element_text(hjust = 0.3, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 8),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function")
print(g3)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/pois_linhom.svg", sep=""), width = 2.5, height = 2)
par(mar = c(0, 0, 0, 0))
print(g3)
dev.off()
my_color_map = c("CSR"="darkgrey", "Hom"="cyan3", "Inhom"="indianred1")
g3 = ggplot()+
geom_ribbon(aes(x=A_env_linhom$r, ymin=A_env_linhom$lo-A_env_linhom$r, ymax=A_env_linhom$hi-A_env_linhom$r, fill="Hom"), alpha=0.2) +
geom_ribbon(aes(x=B_env_linhom$r, ymin=B_env_linhom$lo-B_env_linhom$r, ymax=B_env_linhom$hi-B_env_linhom$r, fill="Inhom"), alpha=0.2) +
geom_line(aes(x=A_env_linhom$r, y=A_env_linhom$obs-A_env_linhom$r, colour="Hom"), show.legend = F) +
geom_line(aes(x=B_env_linhom$r, y=B_env_linhom$obs-B_env_linhom$r, colour="Inhom"), show.legend = F) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=8),
legend.box.margin=margin(0,-10,-10,-10),
legend.key.size = unit(0.5, "cm"),
plot.title = element_text(hjust = 0.3, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 8),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function")
print(g3)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/pois_linhom.svg", sep=""), width = 2.5, height = 2)
par(mar = c(0, 0, 0, 0))
print(g3)
dev.off()
P <- rHardcore(100, 0.1)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.3, lwd=0.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.3, lwd=0.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
Q <- rStrauss(100, 0.5, 0.1)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/strauss_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3, lwd=0.3)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3, lwd=0.3)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
Q <- rStrauss(100, 0.5, 0.1)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/strauss_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3, lwd=0.3)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
P_env_linhom = envelope(P, fun = "Linhom", correction = "isotropic", nsim = 39)
Q_env_linhom = envelope(Q, fun = "Linhom", correction = "isotropic", nsim = 39)
my_color_map = c("CSR"="darkgrey", "Hardcore"="cyan3", "Strauss"="indianred1")
g2 = ggplot()+
geom_ribbon(aes(x=P_env_linhom$r, ymin=P_env_linhom$lo-P_env_linhom$r, ymax=P_env_linhom$hi-P_env_linhom$r, fill="Hardcore"), alpha=0.2) +
geom_ribbon(aes(x=Q_env_linhom$r, ymin=Q_env_linhom$lo-Q_env_linhom$r, ymax=Q_env_linhom$hi-Q_env_linhom$r, fill="Strauss"), alpha=0.2) +
geom_line(aes(x=P_env_linhom$r, y=P_env_linhom$obs-P_env_linhom$r, colour="Hardcore"), show.legend = F) +
geom_line(aes(x=Q_env_linhom$r, y=Q_env_linhom$obs-Q_env_linhom$r, colour="Strauss"), show.legend = F) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=8),
legend.box.margin=margin(0,-10,-10,-10),
legend.key.size = unit(0.5, "cm"),
plot.title = element_text(hjust = 0.3, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 8),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function")
print(g2)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/inhibition_linhom.svg", sep=""), width = 2.5, height = 2)
par(mar = c(0, 0, 0, 0))
print(g2)
dev.off()
Y <- rnoise(runif, square(1), max=100, dimyx=32)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
X <- rpoispp(Z)
plot(Y)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
M <- rMatClust(10, 0.05, mu)
plot(M, main="", pch=21, cex=0.6, bg="black")
X_env_linhom = envelope(P, fun = "Linhom", correction = "isotropic", nsim = 39)
M_env_linhom = envelope(Q, fun = "Linhom", correction = "isotropic", nsim = 39)
my_color_map = c("CSR"="darkgrey", "Cox"="cyan3", "Matern"="indianred1")
g1 = ggplot()+
geom_ribbon(aes(x=X_env_linhom$r, ymin=X_env_linhom$lo-X_env_linhom$r, ymax=X_env_linhom$hi-X_env_linhom$r, fill="Cox"), alpha=0.2) +
geom_ribbon(aes(x=M_env_linhom$r, ymin=M_env_linhom$lo-M_env_linhom$r, ymax=M_env_linhom$hi-M_env_linhom$r, fill="Matern"), alpha=0.2) +
geom_line(aes(x=X_env_linhom$r, y=X_env_linhom$obs-X_env_linhom$r, colour="Cox"), show.legend = F) +
geom_line(aes(x=M_env_linhom$r, y=M_env_linhom$obs-M_env_linhom$r, colour="Matern"), show.legend = F) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=8),
legend.box.margin=margin(0,-10,-10,-10),
legend.key.size = unit(0.5, "cm"),
plot.title = element_text(hjust = 0.3, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 8),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function")
print(g1)
X_env_linhom = envelope(X, fun = "Linhom", correction = "isotropic", nsim = 39)
M_env_linhom = envelope(M, fun = "Linhom", correction = "isotropic", nsim = 39)
my_color_map = c("CSR"="darkgrey", "Cox"="cyan3", "Matern"="indianred1")
g1 = ggplot()+
geom_ribbon(aes(x=X_env_linhom$r, ymin=X_env_linhom$lo-X_env_linhom$r, ymax=X_env_linhom$hi-X_env_linhom$r, fill="Cox"), alpha=0.2) +
geom_ribbon(aes(x=M_env_linhom$r, ymin=M_env_linhom$lo-M_env_linhom$r, ymax=M_env_linhom$hi-M_env_linhom$r, fill="Matern"), alpha=0.2) +
geom_line(aes(x=X_env_linhom$r, y=X_env_linhom$obs-X_env_linhom$r, colour="Cox"), show.legend = F) +
geom_line(aes(x=M_env_linhom$r, y=M_env_linhom$obs-M_env_linhom$r, colour="Matern"), show.legend = F) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=8),
legend.box.margin=margin(0,-10,-10,-10),
legend.key.size = unit(0.5, "cm"),
plot.title = element_text(hjust = 0.3, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 8),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 8),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function")
print(g1)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cluster_linhom.svg", sep=""), width = 2.5, height = 2)
par(mar = c(0, 0, 0, 0))
print(g1)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/matern_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(M, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 3, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
dev.off()
#### loading required libraries (there might be more libraries loaded than required)
load_lib = c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2", "poweRlaw",
"imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR", "dismo", "lctools",
"officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS", "RColorBrewer", "this.path",
"causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere")
install_lib = load_lib[!load_lib %in% installed.packages()]
for(lib in install_lib) install.packages(lib, dependencies=TRUE)
sapply(load_lib, require, character=TRUE)
devtools::install_github("swarm-lab/Rvision")
require("Rvision")
setwd("~/GitHub/spatial-neuro/quantifyVagusNerve/Code")
setwd("~/GitHub/spatial-neuro/quantifyVagusNerve/Code/")
branch_info_folder = "C:/Users/sanja/Documents/GitHub/spatial-neuro/quantifyVagusNerve/Data/Inputs"
branch_info_files = list.files(branch_info_folder, recursive = TRUE, pattern = "\\.csv", full.names = TRUE)
branch_info_files
branch_info_files = list.files(branch_info_folder, recursive = TRUE, pattern = "\\.csv", full.names = FALSE)
branch_info_files
i=1
sample_id = strsplit(branch_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", sample_id, "\n")
folder_path = "C:/Users/sanja/Documents/GitHub/spatial-neuro/quantifyVagusNerve/Data/Inputs/"
axon_info_files = list.files(folder_path, recursive = TRUE, pattern = "\\.csv", full.names = FALSE)
axon_info_files
i=1
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
paste(folder_path, file_name, ".csv", sep="")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=320153.4)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.4)
max_y = 320153.4
folder_path = "C:/Users/sanja/Documents/GitHub/spatial-neuro/quantifyVagusNerve/Data/Inputs/"
axon_info_files = list.files(folder_path, recursive = TRUE, pattern = "\\.csv", full.names = FALSE)
max_y = 320153.4
cat("Computing common max R...\n")
max_inhom_l_r = c()
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.4)
l_inhom = Linhom(axon_pp, correction = "border")
max_inhom_l_r[length(max_inhom_l_r) + 1] = max(l_inhom$r)
}
min_max_r = (min(max_inhom_l_r))
min_max_r
inhomLPlot <- function(sample_id, u_branch.ppp, min_max_r){
#### creating a common range of r-values
r_vect_size = 100
inhom_l_r_vect = seq(0, min_max_r, by=min_max_r/r_vect_size)
lohboot_linhom = lohboot(u_branch.ppp, fun = "Linhom", correction = "isotropic")
lohboot_linhom = lohboot_linhom[lohboot_linhom$r <= min_max_r, ]
env_linhom = envelope(u_branch.ppp, fun = "Linhom", r=inhom_l_r_vect, correction = "isotropic", nsim = 39)
my_color_map = c("CSR"="darkgrey", "Observed"="cyan3")
g = ggplot()+
geom_vline(xintercept = 0, color="grey", size=0.25)+
geom_hline(yintercept = 0, color="grey", size=0.25) +
geom_ribbon(aes(x=env_linhom$r, ymin=env_linhom$lo-env_linhom$r, ymax=env_linhom$hi-env_linhom$r, fill="CSR"), alpha=0.3) +
geom_ribbon(aes(x=lohboot_linhom$r, ymin=lohboot_linhom$lo-lohboot_linhom$r, ymax=lohboot_linhom$hi-lohboot_linhom$r, fill="Observed"), alpha=0.3, show.legend = FALSE) +
geom_line(aes(x=lohboot_linhom$r, y=lohboot_linhom$iso-lohboot_linhom$r, colour="Observed"), show.legend = FALSE) +
theme(legend.position="top",  legend.title=element_blank(), legend.text=element_text(size=10),
legend.box.margin=margin(0,-10,-10,-10),
plot.title = element_text(hjust = 0.5, size=10),
plot.subtitle = element_text(hjust = 0.5, size=8),
axis.text.x = element_text(size = 9), axis.text.y = element_text(size = 9),
axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
panel.background = element_rect(fill='white', colour='black'),
panel.grid.major = element_line(color = "grey", size=0.25, linetype=2)) +
scale_color_manual(values = my_color_map) +
scale_fill_manual(values = my_color_map) +
xlab(expression(paste("Interaction distance (r)"))) + ylab("L(r)")
#labs(title="Besag's centered inhomogeneous L-function", subtitle = sample_id)
print(g)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/linhom_", sample_id, ".svg", sep=""), width = 3, height = 2)
par(mar = c(0, 0, 0, 0))
print(g)
dev.off()
}
pp_info = data.frame()
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.4)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.4)
dev.off()
#inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)), mean(branch.all$euclid), sd(branch.all$euclid))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
pp_info = data.frame()
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.4)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.4)
dev.off()
#inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
col_head = c("sample_id", "point_count", "window_area", "point_intensity", "min_nn_dist", "max_nn_dist", "avg_nn_dist",
"sd_nn_dist", "max_pair_dist")
colnames(pp_info) = col_head
write.csv(pp_info, "D:/Fall 2023/Research/Prelim/figures/proposal spp/spp_stat.csv")
View(pp_info)
i=1
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.2)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=21, cex=0.2)
dev.off()
inhomLPlot(file_name, axon_pp, min_max_r)
pp_info = data.frame()
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.2)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=21, cex=0.2)
dev.off()
inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
col_head = c("sample_id", "point_count", "window_area", "point_intensity", "min_nn_dist", "max_nn_dist", "avg_nn_dist",
"sd_nn_dist", "max_pair_dist")
colnames(pp_info) = col_head
write.csv(pp_info, "D:/Fall 2023/Research/Prelim/figures/proposal spp/spp_stat.csv")
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.2)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=21, cex=0.2, bg="black")
dev.off()
#inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.008)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=21, cex=0.008, bg="black")
dev.off()
#inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
i=12
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.008)
axon_pp
i=15
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.008)
axon_pp
i=36
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
i=29
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=21, cex=0.008)
axon_pp
#### loading required libraries (there might be more libraries loaded than required)
load_lib = c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2", "poweRlaw",
"imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR", "dismo", "lctools",
"officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS", "RColorBrewer", "this.path",
"causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere")
install_lib = load_lib[!load_lib %in% installed.packages()]
for(lib in install_lib) install.packages(lib, dependencies=TRUE)
sapply(load_lib, require, character=TRUE)
devtools::install_github("swarm-lab/Rvision")
require("Rvision")
folder_path = "C:/Users/sanja/Documents/GitHub/spatial-neuro/quantifyVagusNerve/Data/Inputs/"
axon_info_files = list.files(folder_path, recursive = TRUE, pattern = "\\.csv", full.names = FALSE)
max_y = 320153.4
pp_info = data.frame()
for (i in c(1:length(axon_info_files))) {
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.008)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.008, bg="black")
dev.off()
#inhomLPlot(file_name, axon_pp, min_max_r)
pp_nn_dist = nndist(axon_pp)
pp_metrics = c(axon_pp$n, summary(axon_pp)$window$area, intensity.ppp(axon_pp),
min(pp_nn_dist), max(pp_nn_dist), mean(pp_nn_dist), sd(pp_nn_dist),
max(pairdist(axon_pp)))
pp_info = rbind(pp_info, c(file_name, pp_metrics))
}# loop ends for each sample
col_head = c("sample_id", "point_count", "window_area", "point_intensity", "min_nn_dist", "max_nn_dist", "avg_nn_dist",
"sd_nn_dist", "max_pair_dist")
colnames(pp_info) = col_head
i=29
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.008)
plot(axon_pp, main="", pch=19, cex=0.008, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.008, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.01, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.015, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.02, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.4, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.1, bg="black")
dev.off()
i=12
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.1, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.1, bg="black")
dev.off()
i=15
file_name = strsplit(axon_info_files[i], ".csv")[[1]]
cat("\nSample Id: ", file_name, "\n")
axon_locations = unique(read.csv(paste(folder_path, file_name, ".csv", sep="")))
retrieved_contour = readRDS(paste(folder_path, file_name, ".rds", sep=""))
axon_pp = ppp(x=axon_locations$X, y=axon_locations$Y, checkdup=F, window = retrieved_contour)
axon_pp = rescale.ppp(axon_pp, s=max_y)  #pre-computed maximum y-range of all the fascicles
axon_pp = shift.ppp(axon_pp, origin = "centroid")
plot(axon_pp, main="", pch=19, cex=0.1, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/proposal spp/pp_", file_name, ".svg", sep=""), width = 2, height = 1.5)
par(mar = c(0, 0, 0, 0))
plot(axon_pp, main="", pch=19, cex=0.1, bg="black")
dev.off()
