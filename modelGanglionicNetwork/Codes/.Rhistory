g2_degree = after_elim_0[[3]]
face_list = after_elim_0[[4]]
face_area_list = after_elim_0[[5]]
face_node_count = after_elim_0[[6]]
triKDE_face_feat_1 = after_elim_0[[7]]
triKDE_face_feat_2 = after_elim_0[[8]]
triKDE_edge_feat = after_elim_0[[9]]
tri_face_features = after_elim_0[[10]]
face_convexity_mean = after_elim_0[[11]]
#### figure out the vertex id of the corner points
c_v = c()
for (i in c(1:gen.ppp$n)) {
if(isCornerV(i, gen.ppp)){
c_v = c(c_v, i)
}
}
#### compute index of the corner edges
c_e = which(network_extra1$ind1 %in% c_v | network_extra1$ind2 %in% c_v)
#### remove corner points any edge incident on them
gen.ppp_2 = subset.ppp(gen.ppp, !((x==gen.ppp$window$xrange[1] | x==gen.ppp$window$xrange[2])
& (y==gen.ppp$window$yrange[1] | y==gen.ppp$window$yrange[2])))
if(is.empty(c_e)){
cat("No corner edges to eliminate\n")
}else{
#### eliminate corner edges
cat("Eliminating corner edges\n")
after_elim_1 = eliminateEdges(gen.ppp, network_extra1, c_e)
noChange = after_elim_1[[1]]
network_extra1 = after_elim_1[[2]]
g2_degree = after_elim_1[[3]]
face_list = after_elim_1[[4]]
face_area_list = after_elim_1[[5]]
face_node_count = after_elim_1[[6]]
triKDE_face_feat_1 = after_elim_1[[7]]
triKDE_face_feat_2 = after_elim_1[[8]]
triKDE_edge_feat = after_elim_1[[9]]
tri_face_features = after_elim_1[[10]]
face_convexity_mean = after_elim_1[[11]]
}
#### final simulated network
graph_obj =  make_empty_graph() %>% add_vertices(gen.ppp_2$n)
graph_obj = add_edges(as.undirected(graph_obj),
as.vector(t(as.matrix(network_extra1[,5:6]))))
#### Transitivity measures the probability that the adjacent vertices of a vertex are connected.
#### This is sometimes also called the clustering coefficient.
cluster_coeff_s = igraph::transitivity(graph_obj, type = "global")
cat("CC Sim: ", cluster_coeff_s, "\n")
#### construct and display as corresponding ppp and linnet
degs = igraph::degree(graph_obj, mode="total")
# ord = order(as.numeric(names(degs)))
# degs = degs[ord]
#### attach the degree information to the point pattern for proper visualization
marks(gen.ppp_2) = factor(degs)
gen.ppp_2$markformat = "factor"
g_o_lin = linnet(gen.ppp_2, edges=as.matrix(network_extra1[,5:6]))
branch.lpp_s = lpp(gen.ppp_2, g_o_lin )
plot(branch.lpp_s, main="Sim", pch=21, cex=1.2, bg=c("black", "red3", "green3", "orange",
"dodgerblue", "white", "maroon1",
"mediumpurple", "yellow", "cyan"))
return(list(gen.ppp_2, network_extra1))
}
generateNetworkEdges_3 <- function(gen.ppp, branch.ppp, branch_all, org_face_feature, orgKDE_face_feat_1, orgKDE_face_feat_2, orgKDE_edge_feat,
meshedness, network_density, compactness, cluster_coeff, org_max_deg,
sample_id, org_face_convexity_mean, org_face_convexity_sd){
#### constructing the deterministic Delaunay triangulation as the initial ganglionic network
triangulation_info_list = deterministicEdges_3(gen.ppp, branch.ppp, branch.all, org_face_feature, sample_id, org_face_convexity_mean, org_face_convexity_sd)
#### returned values
network_extra1 = triangulation_info_list[[1]]
face_list = triangulation_info_list[[2]]
face_area_list = triangulation_info_list[[3]]
face_node_count = triangulation_info_list[[4]]
triKDE_face_feat_1 = triangulation_info_list[[5]]
triKDE_face_feat_2 = triangulation_info_list[[6]]
triKDE_edge_feat = triangulation_info_list[[7]]
g2_degree = triangulation_info_list[[8]]
tri_face_features = triangulation_info_list[[9]]
#### remove edges from the initial triangulation by rejection sampling
sampled_net = rejectionSampling_3(gen.ppp, branch.ppp, branch.all, org_face_feature, network_extra1, face_list, face_area_list, face_node_count,
g2_degree, orgKDE_face_feat_1, orgKDE_face_feat_2, triKDE_face_feat_1, triKDE_face_feat_2, orgKDE_edge_feat, triKDE_edge_feat,
meshedness, network_density, compactness, cluster_coeff, org_max_deg,
sample_id, tri_face_features, org_face_convexity_mean, org_face_convexity_sd)
gen.ppp = sampled_net[[1]]
network_extra = sampled_net[[2]]
#### create a graph from sampled triangulation
g2 = make_empty_graph() %>% add_vertices(gen.ppp$n)
g2 = add_edges(as.undirected(g2), as.vector(t(as.matrix(network_extra[,5:6]))))
#### display as corresponding ppp and linnet
g2_lin = linnet(gen.ppp, edges=as.matrix(network_extra[, 5:6]))
return(list(gen.ppp, network_extra, g2_lin))
}
####main
#### extracting parent directory information for accessing input and output location
dir = this.dir()
folder = strsplit(dir, "/")
folder = folder[[1]][length(folder[[1]])]
parent = strsplit(dir, folder)
face_folder = paste(parent, "Outputs/ENSMouse/FaceFeature/", sep="")
face_features_combined = read.csv(paste(face_folder, "FaceFeatures_3.csv", sep = ""))
#### the TIF images of the ganglionic networks are preprocessed in Fiji (ImageJ) and
#### the network information is extracted as .csv files
branch_info_folder = paste(parent, "Data/ENSMouse Branch Information (in um) v2.0/", sep="")
branch_info_files = list.files(branch_info_folder, recursive = TRUE, pattern = "\\.csv", full.names = TRUE)
i = 13 # index of the ENS network we want to work on
ens_location = strsplit(branch_info_files[i], "/")[[1]][11]
sample_id = strsplit(strsplit(branch_info_files[i], "/")[[1]][11], "\\.")[[1]][1]
cat("\n(", i, ") Location: ", ens_location, "\nSample Id: ", sample_id, "\n")
max_y = 1 # 4539.812 found by computation; right now keeping everything unscaled as the moments can not be computed otherwise
data_struct_list = constructDataStruct(sample_id, parent, branch_info_files[i], output_folder_path, max_y)
#### the returned values
branch.all = data_struct_list[[1]]
branch.ppp = data_struct_list[[2]]  # marked point pattern, degree of the points as marks
branch.lpp = data_struct_list[[3]]
g1 = data_struct_list[[4]]
hardcoreStrauss_model_param = data_struct_list[[5]]
plot(branch.lpp, main="original", pch=21, cex=1.2, bg=c("black", "red3", "green3", "orange", "dodgerblue",
"white", "maroon1", "mediumpurple"))
svglite(paste("D:/Fall 2023/Research/Prelim/figures/org figures/org_net.svg", sep=""), width = 8, height = 6)
plot(branch.lpp, main="", pch=21, cex=1, bg=c("black", "red3", "green3", "orange", "dodgerblue",
"white", "maroon1", "mediumpurple"))
dev.off()
#### alpha, gamma, psi (meshedness, network density and compactness parameters)
N = branch.ppp$n
E = length(branch.all$x1)
A = summary(branch.ppp)$window$area
L = sum(branch.all$euclid)
meshedness = (E-N+1)/((2*N)-5)
network_density = E/((3*N)-6)
compactness = 1- ((4*A)/(L-(2*sqrt(A)))^2)
cat("Meshedness: ", meshedness, ", Network density: ", network_density, ", Compactness: ", compactness, "\n")
#### Transitivity measures the probability that the adjacent vertices of a vertex are connected.
#### This is sometimes also called the clustering coefficient.
cluster_coeff = igraph::transitivity(g1, type = "global")
cat("CC original: ", cluster_coeff, "\n")
org_max_deg = max(igraph::degree(g1))
#### filter out the face face features of the sample under consideration
#### Reminder: the face features were computed assuming additional edges were computed
#### to close the open faces at the boundary
#### similar thing should be done for the new network too (where needed).
face_feature = face_features_combined[face_features_combined$sample_id == sample_id, ]
org_face_convexity_mean = mean(face_feature$Convexity)
org_face_convexity_sd = sd(face_feature$Convexity)
cat("original avg face convexity: ", org_face_convexity_mean, " +- ", org_face_convexity_sd, "\n")
orgKDE_face_feat_1 = kde(as.matrix(data.frame(face_feature$Area_SL, face_feature$Orient.)))
orgKDE_face_feat_2 = kde(as.matrix(data.frame((face_feature$Node_Count) )),
h=density((face_feature$Node_Count))$bw)
orgKDE_edge_feat = kde(as.matrix(data.frame((apply(branch.all, 1, function(x) calcAngle(x))),
(branch.all$euclid) )))
####At this point, new point pattern will be simulated.
####For now we are generating networks on the original point pattern.
####branch.ppp will be replaced by some new ppp object
gen.ppp = unmark(branch.ppp)
gen_corner.ppp = ppp(x=c(gen.ppp$window$xrange[1], gen.ppp$window$xrange[2], gen.ppp$window$xrange[2], gen.ppp$window$xrange[1]),
y=c(gen.ppp$window$yrange[2], gen.ppp$window$yrange[2], gen.ppp$window$yrange[1], gen.ppp$window$yrange[1]),
window = gen.ppp$window)
gen.ppp = superimpose(gen.ppp, gen_corner.ppp)
#### call the network generation functions
network_info_list = generateNetworkEdges_3(gen.ppp, branch.ppp, branch_all, face_feature, orgKDE_face_feat_1, orgKDE_face_feat_2, orgKDE_edge_feat,
meshedness, network_density, compactness, cluster_coeff, org_max_deg,
sample_id, org_face_convexity_mean, org_face_convexity_sd)
#### loading required libraries (there might be more libraries loaded than required)
load_lib = c("deldir", "spatstat", "magrittr", "dplyr", "igraph", "scales", "httr", "tidyverse", "ggnetwork", "ggplot2", "poweRlaw",
"imager", "viridis", "plotrix", "openxlsx", "tidyr", "spdep", "maptools", "tmap", "OpenImageR", "dismo", "lctools",
"officer", "rvg", "truncnorm", "emdist", "ks", "rlist", "readxl", "OneR", "MASS", "RColorBrewer", "this.path",
"causaloptim", "RBGL", "svglite", "ggrepel", "devtools", "geosphere", "philentropy",
"collections")
install_lib = load_lib[!load_lib %in% installed.packages()]
for(lib in install_lib) install.packages(lib, dependencies=TRUE)
sapply(load_lib, require, character=TRUE)
Y <- rnoise(runif, square(1), max=100)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
X <- rpoispp(Z)
plot(Y)
plot(Z)
plot(X)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 1.8, height = 1.8)
plot(Z, main="")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
plot(X, main="", pch=21, cex=1, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 2, height = 2)
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 2, height = 2)
plot(X, main="", pch=21, cex=1, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 4, height = 4)
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 4, height = 4)
plot(X, main="", pch=21, cex=1, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 4, height = 4)
plot(X, main="", pch=21, cex=0.8, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 4, height = 4)
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
plot(Z, main="")
legend("bottom")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 2.1, height = 2.1)
par(mar = c(0, 0, 0, 0))
plot(Z, main="")
legend("bottom")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 2.1, height = 2.1)
par(mar = c(0, 0, 0, 0))
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 2.5, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 3, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="")
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/matern_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/matern_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
mu <- as.im(function(x,y){ exp(2 * x + 1) }, owin())
X <- rMatClust(10, 0.05, mu)
plot(X, main="", pch=21, cex=0.6, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/matern_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
P <- rHardcore(100, 0.1)
plot(P, main="", pch=21, cex=0.6, bg="black")
plot(P, main="", pch=19, cex=2)
plot(P, main="", pch=20, cex=2)
plot(P, main="", pch=1, cex=2)
plot(P, main="")
plot(P, main="", cex=6)
plot(P, main="", cex=5)
plot(P, main="", cex=5.5)
plot(P, main="", cex=5.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=5.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.8)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.5)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
Q <- rStrauss(100, 0.5, 0.1)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/strauss_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/strauss_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3, lwd=0.5)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/hardcore_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(P, main="", cex=2.3, lwd=0.3)
plot(P, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
Q <- rStrauss(100, 0.5, 0.1)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/strauss_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Q, main="", cex=2.3, lwd=0.3)
plot(Q, main="", pch=21, cex=0.6, bg="black", add=TRUE)
dev.off()
A <- rpoispp(100)
plot(A, main="", pch=21, cex=0.6, bg="black")
A <- rpoispp(100)
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/pois_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(A, main="", pch=21, cex=0.6, bg="black")
dev.off()
i <- function(x,y){ exp(2 * x + 1) }
B <- rpoispp(i)
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 2*x + 3*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 2*x + 3*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 2*x + 3*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 2*x + 3*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 2*x + 3*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 200*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 200*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 200*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 200*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 20*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 20*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 20*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 1 + 20*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
i <- function(x,y){ 10 + 20*x + 30*y }
B <- rpoispp(i)
# svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
# par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/i_pois_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(B, main="", pch=21, cex=0.6, bg="black")
dev.off()
plot(Z, main="")
plot(Z, main="", col=grey(seq(1, 0, length = 256)))
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Z <- Smooth(Y)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Z <- Smooth(Y, sigma=0.1, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 3, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
dev.off()
plot(Y)
Y <- rnoise(runif, square(1), max=10)
plot(Y)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Y <- rnoise(runif, square(1), max=100, dimyx=32)
plot(Y)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Y <- rnoise(runif, square(1), max=100, dimyx=64)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Y <- rnoise(runif, square(1), max=100, dimyx=32)
Z <- Smooth(Y, sigma=0.05, normalise=TRUE, bleed=FALSE)
X <- rpoispp(Z)
plot(Y)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
plot(X, main="", pch=21, cex=0.6, bg="black")
Z <- Smooth(Y, sigma=0.1, normalise=TRUE, bleed=FALSE)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
Y <- rnoise(runif, square(1), max=100, dimyx=32)
Z <- Smooth(Y, sigma=0.07, normalise=TRUE, bleed=FALSE)
X <- rpoispp(Z)
plot(Y)
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
plot(X, main="", pch=21, cex=0.6, bg="black")
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_intensity.svg", sep=""), width = 3, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(Z, main="", col=grey(seq(0, 1, length = 256)))
dev.off()
svglite(paste("D:/Fall 2023/Research/Prelim/figures/example pp/cox_pp.svg", sep=""), width = 1.8, height = 1.8)
par(mar = c(0, 0, 0, 0))
plot(X, main="", pch=21, cex=0.6, bg="black")
dev.off()
